namespace {{ camelCase model }}s

type {{ pascalCase model }} = { id : {{ pascalCase model }}.Id }
type {{ pascalCase model }}.Id = Id Text
{{ pascalCase model }}.Id.unwrap = cases {{ pascalCase model }}.Id.Id v -> v

ability {{ pascalCase model }}Service where
  upsert : {{ pascalCase model }} ->{ {{ pascalCase model }}Service} ()
  get : {{ pascalCase model }}.Id ->{ {{ pascalCase model }}Service} (Optional {{ pascalCase model }})
  delete : {{ pascalCase model }}.Id ->{ {{ pascalCase model }}Service} ()
  getAll : '{ {{ pascalCase model }}Service } (List {{ pascalCase model }})

{{ pascalCase model }}Service.run : Database -> '{g, {{ pascalCase model }}Service} a -> {g, Remote} a
{{ pascalCase model }}Service.run db p =
  {{ pascalCase model }}s : OrderedTable ({{ pascalCase model }}.Id) {{ pascalCase model }}
  {{ pascalCase model }}s = OrderedTable.named db "{{ pascalCase model }}s" Universal.ordering

  get{{ pascalCase model }}' : {{ pascalCase model }}.Id ->{g, Remote} (Optional {{ pascalCase model }})
  get{{ pascalCase model }}' {{ camelCase model }}Id = OrderedTable.tryRead {{ pascalCase model }}s {{ camelCase model }}Id

  getAll' : '{g, Remote} (List {{ pascalCase model }})
  getAll' = do OrderedTable.toStream {{ pascalCase model }}s |> Stream.map at2 |> Stream.toList

  upsert{{ pascalCase model }}' : {{ pascalCase model }} ->{g, Remote} ()
  upsert{{ pascalCase model }}' {{ pascalCase model }} =
    {{ camelCase model }}Id = {{ pascalCase model }}.id {{ pascalCase model }}
    OrderedTable.write {{ pascalCase model }}s {{ camelCase model }}Id {{ pascalCase model }}

  delete{{ pascalCase model }}' : {{ pascalCase model }}.Id ->{g, Remote} ()
  delete{{ pascalCase model }}' {{ camelCase model }}Id =
    OrderedTable.delete {{ pascalCase model }}s {{ camelCase model }}Id

  go : '{g, {{ pascalCase model }}Service} a -> {g, Remote} a
  go p = handle !p with cases
    { {{ pascalCase model }}Service.upsert {{ camelCase model }} -> resume} ->
      result = upsert{{ pascalCase model }}' {{ camelCase model }}
      go '(resume result)
    { {{ pascalCase model }}Service.get {{ camelCase model }}Id -> resume} ->
      result = get{{ pascalCase model }}' {{ camelCase model }}Id
      go '(resume result)
    { {{ pascalCase model }}Service.getAll _ -> resume} ->
      result = getAll' ()
      go '(resume result)
    { {{ pascalCase model }}Service.delete {{ camelCase model }}Id -> resume} ->
      result = delete{{ pascalCase model }}' {{ camelCase model }}Id
      go '(resume result)
    { k } -> k
  go p

routes : '{Route, Log, Exception, {{ pascalCase model }}Service} ()
routes =
  use Parser /

  get{{ pascalCase model }}sForm = do
    _ = Route.noCapture GET (Parser.s "{{ dashCase model }}s" / Parser.s "new")
    page [ {{ camelCase model }}s.components.Form () ] () |> toText |> ok.html

  get{{ pascalCase model }}s = do
    _ = Route.noCapture GET (Parser.s "{{ dashCase model }}s")
    p [] [text "render them as html"] |> toText |> ok.html

  post{{ pascalCase model }}s = do
    _ = Route.noCapture POST (Parser.s "{{ dashCase model }}s")

    -- Get data from form and create new instance
    -- Then pass to the service
    formData = getFormData()
    -- Example data from the example form
    name = Map.get "name" formData
    comment = Map.get "comment" formData
    favorite_animal = Map.get "favorite-animal" formData
    checked = Map.get "check-me" formData
    
    record = {{ pascalCase model }} (Id "1")
    {{ pascalCase model }}Service.upsert record
    
    -- Hard coded always an ID of 1
    redirect (baseUrl () Path./ "{{ dashCase model }}" Path./ "1" ) 

  get{{ pascalCase model }}= do
    {{ pascalCase model }}Id = route GET (Parser.s "{{ dashCase model }}s" / Parser.text)
    p [] [text "render it as html"] |> toText |> ok.html

  put{{ pascalCase model }}= do
    {{ pascalCase model }}Id = route PUT (Parser.s "{{ dashCase model }}s" / Parser.text)
    formData = getFormData()
    p [] [text "done"] |> toText |> ok.html

  delete{{ pascalCase model }}= do
    {{ pascalCase model }}Id = route DELETE (Parser.s "{{ dashCase model }}s" / Parser.text)
    {{ pascalCase model }}Service.delete (Id.Id {{ pascalCase model }}Id)
    p [] [text "done"] |> toText |> ok.html

  get{{ pascalCase model }}sForm <|> get{{ pascalCase model }}s <|> post{{ pascalCase model }}s <|> get{{ pascalCase model }} <|> put{{ pascalCase model }} <|> delete{{ pascalCase model }}
  
components.Form : '{Route} Html
components.Form = do
    form
        [ class "p-4"
        , hx_post (baseUrl () Path./ "posts" |> toText)
        ]
        [ sl_input
            [ name "name"
            , label "Name"
            , required
            ]
            []
        , br []
        , sl_select
            [ label "Favorite Animal"
            , clearable
            , required
            , name "favorite-animal"
            ]
            [ sl_option
                [ value "birds"
                ]
                [ text "Birds" ]
            , sl_option
                [ value "cats"
                ]
                [ text "Cats" ]
            , sl_option
                [ value "dogs"
                ]
                [ text "Dogs" ]
            , sl_option
                [ value "other"
                ]
                [ text "Other" ]
            ]
        , br []
        , sl_textarea
            [ name "comment"
            , label "Comment"
            , required 
            ]
            []
        , br []
        , sl_checkbox
            [ required 
            , name "check-me"
            ]
            [ text "Check me before submitting" ]
        , br []
        , br []
        , sl_button
            [ type_ "submit"
            , variant "primary"
            ]
            [ text "Submit" ]
        ]
